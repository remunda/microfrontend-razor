@page

<h1 id="core-ideas-behind-micro-frontends">Core Ideas behind Micro Frontends</h1>

<p>
    <ul>
        <li><strong>Be Technology Agnostic</strong><br>Each team should be able to choose and upgrade their stack without having to coordinate with other teams. <a href="#the-dom-is-the-api">Custom Elements</a> are a great way to hide implementation details while providing a neutral interface to others.</li>
        <li><strong>Isolate Team Code</strong><br>Don’t share a runtime, even if all teams use the same framework. Build independent apps that are self contained. Don’t rely on shared state or global variables.</li>
        <li><strong>Establish Team Prefixes</strong><br>Agree on naming conventions where isolation is not possible yet. Namespace CSS, Events, Local Storage and Cookies to avoid collisions and clarify ownership.</li>
        <li><strong>Favor Native Browser Features over Custom APIs</strong><br>Use <a href="#parent-child-communication--dom-modification">Browser Events for communication</a> instead of building a global PubSub system. If you really have to build a cross-team API, try keeping it as simple as possible.</li>
        <li><strong>Build a Resilient Site</strong><br>Your feature should be useful, even if JavaScript failed or hasn’t executed yet. Use <a href="#server-side-rendering--universal-rendering">Universal Rendering</a> and Progressive Enhancement to improve perceived performance.</li>
        @for (int i = 0; i < 5; i++)
        {
            <li><strong>Some</strong><br>other text</li>
        }
    </ul>
</p>
